# source /etc/profile
source /etc/profile

# set the right locale env for myself
# set de_CH.utf*8 or C
export LC_CTYPE="$(locale -a 2>/dev/null | grep -i de_ch | grep -i utf || echo "C")"
export LANG="C"

# set the right term
if [ "${TERM}" = "xterm" ] ; then
    if [ -z "${COLORTERM}" ] ; then
        if [ -z "${XTERM_VERSION}" ] ; then
            echo "Warning: Terminal wrongly calling itself 'xterm'."
        else
            case "${XTERM_VERSION}" in
            "XTerm(256)") TERM="xterm-256color" ;;
            "XTerm(88)") TERM="xterm-88color" ;;
            "XTerm") ;;
            *)
                echo "Warning: Unrecognized XTERM_VERSION: ${XTERM_VERSION}"
                ;;
            esac
        fi
    else
        case "${COLORTERM}" in
            gnome-terminal|roxterm|mate-terminal|truecolor)
                # Those crafty Gnome folks require you to check COLORTERM,
                # but don't allow you to just *favor* the setting over TERM.
                # Instead you need to compare it and perform some guesses
                # based upon the value. This is, perhaps, too simplistic.
                TERM="gnome-256color"
                ;;
            *)
                echo "Warning: Unrecognized COLORTERM: ${COLORTERM}"
                ;;
        esac
    fi
fi
SCREEN_COLORS="`tput colors`"
if [ -z "${SCREEN_COLORS}" ] ; then
    case "${TERM}" in
        screen-*color-bce)
            echo "Unknown terminal ${TERM}. Falling back to 'screen-bce'."
            export TERM=screen-bce
            ;;
        *-88color)
            echo "Unknown terminal ${TERM}. Falling back to 'xterm-88color'."
            export TERM=xterm-88color
            ;;
        *-256color)
            echo "Unknown terminal ${TERM}. Falling back to 'xterm-256color'."
            export TERM=xterm-256color
            ;;
    esac
    SCREEN_COLORS=`tput colors`
fi
if [ -z "${SCREEN_COLORS}" ] ; then
    case "${TERM}" in
        gnome*|xterm*|konsole*|aterm|[Ee]term)
            echo "Unknown terminal ${TERM}. Falling back to 'xterm'."
            export TERM=xterm
            ;;
        rxvt*)
            echo "Unknown terminal ${TERM}. Falling back to 'rxvt'."
            export TERM=rxvt
            ;;
        screen*)
            echo "Unknown terminal ${TERM}. Falling back to 'screen'."
            export TERM=screen
            ;;
    esac
    SCREEN_COLORS=`tput colors`
fi

# Set up the prompt
autoload -Uz promptinit
promptinit

# I love history in ZSH
HISTSIZE=800000
SAVEHIST=800000
HISTORY_IGNORE='(rm*|sudo rm*)'
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
compinit

# store uname value
uname="$(uname -s)"

# mac special
if [[ "${uname}" == "Darwin" ]]
then
    eval "$(cat ~/.dotfiles/zsh/zshrc.dircolors)"
else
    eval "$(dircolors -b)"
fi

# completion settings
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
zstyle ':completion:*:killall:*' command 'ps -u $USER -o command'
# I also want to honor IPs (regarding known_hosts files especially)
zstyle ':completion:*' use-ip true
# pass completion for pw function
compdef '_pass_complete_entries' pw

# load more functions
fpath=(${fpath} ~/.dotfiles/zsh/functions)

# run-help functions
autoload -U run-help-sudo
autoload -U run-help-openssl
autoload -U run-help-ip
autoload -U run-help-git
autoload -U run-help-btrfs
autoload -U run-help-puppet
autoload -U _pass_complete_entries
autoload -U _pass_complete_entries_helper

# custom functions
autoload -U zshaddhistory
autoload -U loop
autoload -U pw
autoload -U gitgrep
autoload -U cineman
autoload -U wtime
autoload -U stopwatch
autoload -U tputcolors
autoload -U spellit
autoload -U maildelivery
autoload -U smtplogin
autoload -U countdown
autoload -U dictcc
autoload -U reverse
autoload -U csrcheck
autoload -U crtcheck
autoload -U vpn

# turn on interactive comments
setopt interactivecomments

# perform path expansion
setopt EQUALS

# it was told me to do that
unsetopt MULTIBYTE

# some more strange things
setopt menu_complete

# correction?? I do not know..
setopt correct

# share history with all terminals open
setopt share_history

# because someday i will learn advanced pattern matching
# # it sounds very useful, like regexps
setopt extended_glob

# ignore duplicates in history
setopt histignoredups

# ignore commands with preceding space in history
# seems not to work :/
setopt histignorespace

# save timestamps of commands
setopt extended_history

# because i love history, appendixes, and appending things
setopt appendhistory

# don't assume i want to cd, that's fucking rude
unsetopt autocd

# seriously why does this shit even exist
unsetopt beep

# don't complain about no matches found
# just pass the argument to the command/alias/function/whatever
unsetopt nomatch

# when i put a process in the background,
# it's code for "fuck off and leave me alone"
unsetopt notify

# lets files beginning with a . be matched without explicitly specifying the dot
setopt globdots

# prevents you from accidentally overwriting an existing file
setopt noclobber

# something with prompt things.. actually i do not know what this does
setopt PROMPT_SUBST

# cd into folder if command doesn't exist but a folder does
setopt AUTO_CD

# put multiple directorys in cd dir stack
setopt AUTO_PUSHD
# but ignore duplicates
setopt PUSHD_IGNORE_DUPS

####################
#################### beginning of sourcing
####################

# source local config (testing or so)
if [ -f ~/.dotfiles/zsh/zshrc.local ]
then
    source ~/.dotfiles/zsh/zshrc.local
fi

# source local config (testing or so)
if [ -f ~/.dotfiles/zsh/zshrc.local2 ]
then
    source ~/.dotfiles/zsh/zshrc.local2
fi

# source aliases
source ~/.dotfiles/zsh/zshrc.alias

# source macos aliases if applicable
if [[ "${uname}" == "Darwin" ]]
then
    source ~/.dotfiles/zsh/zshrc.mac.alias
fi

# include keybindings from file
source ~/.dotfiles/zsh/zshrc.bindkey
#
# make automatic / with 2 dots (.)
# useful if: ...... ==> ../../../
rationalise-dot() {
    if [[ ${LBUFFER} = *.. ]]; then
        LBUFFER+=/..
    else
        LBUFFER+=.
    fi
}
zle -N rationalise-dot
bindkey . rationalise-dot

# exports
export PASSWORD_STORE_X_SELECTION='XA_PRIMARY'
export PASSWORD_STORE_CLIP_TIME='20'
export _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'
export EDITOR="vim"
export GIT_EDITOR="vim +startinsert"
export PAGER="less"
export PATH="${HOME}/local/bin:${HOME}/local/bin2:${HOME}/.dotfiles/bin:${PATH}"
test "${uname}" = "Darwin" && export PATH="/usr/local/opt/gpg-agent/bin:$PATH"
export GPG_TTY=$(tty)

export PATH="${HOME}/.perl5/bin${PATH:+:${PATH}}"
export PERL5LIB="PERL5LIB=~/local/bin/server-scripts/lib:${HOME}/.perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
export PERL_LOCAL_LIB_ROOT="${HOME}/.perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
export PERL_MB_OPT="--install_base \"${HOME}/.perl5\""
export PERL_MM_OPT="INSTALL_BASE=${HOME}/.perl5"

# homebrew binaries
test -d /opt/homebrew/bin && PATH="${PATH}:/opt/homebrew/bin"

# source autojump if installed
if [ -f /usr/share/autojump/autojump.sh ]
then
    source /usr/share/autojump/autojump.sh
elif [ -s ~/.autojump/etc/profile.d/autojump.sh ]
then
    source ~/.autojump/etc/profile.d/autojump.sh
elif [ -f /usr/local/etc/profile.d/autojump.sh ]
then
    source /usr/local/etc/profile.d/autojump.sh
elif [ -f /opt/homebrew/share/autojump/autojump.zsh ]
then
    source /opt/homebrew/share/autojump/autojump.zsh
fi

####################
#################### end of sourcing
####################

# enable colours
autoload -U colors
colors

# if command not found
if [[ -x /usr/lib/command-not-found ]] ; then
    function command_not_found_handler() {
        /usr/lib/command-not-found --no-failure-msg -- ${1}
    }
fi

# set $USER if not exists
if [ -z "${USER}" ]
then
    USER="$(whoami)"
    export USER="$(whoami)"
fi

# skip if GPG agent is in use
if [[ "${SSH_AGENT_USE_GPG}" != 'true' ]]
then

    # define env file for ssh-agent informations
    AGENT_ENV_FILE="/tmp/agent.${USER}.env"
    PGREP_SSH_AGENT="$(ps -eo pid,args,state | grep [s]sh-agent | grep -v Z$ | awk '{print $1}')"

    # start ssh-agent if none is started
    if [ -z "${PGREP_SSH_AGENT}" ]
    then
        # remove agent file
        rm -f ${AGENT_ENV_FILE}

        # write agent info to file
        eval $(ssh-agent | tee ${AGENT_ENV_FILE})

        # regrep for ssh-agent process since it is running now
        PGREP_SSH_AGENT="$(ps -eo pid,args,state | grep [s]sh-agent | grep -v Z$)"
    elif [ "${PGREP_SSH_AGENT}" ] && [ $(grep -sq "SSH_AGENT_PID=${PGREP_SSH_AGENT}" ${AGENT_ENV_FILE} && echo 'ok' || echo 'mismatch') == 'ok' ]
    then
        # source existing agent
        source ${AGENT_ENV_FILE} 2> /dev/null
    elif [ "${PGREP_SSH_AGENT}" ]
    then
        # reuse existing agent

        # remove agent file
        rm -f ${AGENT_ENV_FILE}

        # write agent info to file
        eval $(ssh-agent | tee ${AGENT_ENV_FILE})
    else
        # failsafe
        echo 'Something wrong with ssh agent detection, continuing..'
    fi

    # ssh key handling for ssh agent

    # available keys
    keys_avail="$(find ~/.ssh -name "*.key" -o -name "id_*" | xargs -I {} readlink -f {} | grep -v '.pub$' | sort -u)"
    if [[ "x${keys_avail}" != 'x' ]]
    then
        keys_avail_verbose="$(echo "${keys_avail}" | while read key_file; do echo "$(ssh-keygen -lf "${key_file}") ${key_file}"; done)"
        keys_avail_fprint="$(echo "${keys_avail_verbose}" | awk '{print $2}')"
    fi

    # keys in agent
    keys_agent="$(ssh-add -l)"
    keys_agent_fprint="$(echo "${keys_agent}" | awk '{print $2}')"

    # missing keys in agent
    keys_missing_fprint="$(comm -13 <(echo "${keys_agent_fprint}" | sort -u) <(echo "${keys_avail_fprint}" | sort -u))"

    # add missing keys
    if [ "${PGREP_SSH_AGENT}" ] && [ "${#keys_missing_fprint}" -gt 0 ]
    then
        # loop through missing keys based on fingerprint
        while read fprint
        do
            # get filename of missing key
            key_file="$(grep -m1 "${fprint}" <<< ${keys_avail_verbose} | awk '{print $NF}')"

            # add missing key
            echo "SSH Agent: Adding missing key '${key_file}'"
            ssh-add -t 7200 "${key_file}" < /dev/tty 2> /dev/null
        done \
            <<< ${keys_missing_fprint}
    fi

fi

# list tmux sessions if tmux running
if pgrep -u ${USER} tmux 2> /dev/null > /dev/null
then
    # reinitialize envs for tmux server
    tmux setenv SSH_AUTH_SOCK ${SSH_AUTH_SOCK}; tmux setenv SSH_AGENT_PID ${SSH_AGENT_PID};
    # list tmux sessions
    echo ""
    echo "Running tmux sessions:"
    tmux ls 2> /dev/null || echo "no tmux session running"
    echo ""
fi

# warn about broken sw raid
grep -sq _ /proc/mdstat && {
  echo ++++++++++++++++++++
  echo BROKEN MD RAID, please check manually
  echo press enter to dismiss warning
  echo ++++++++++++++++++++
  read blah
}

# my nice prompt template

function precmd() {

    # prompt for right side of screen
    RPROMPT='[%*]'

    # TMUX <3 stuff
    test ! -z "${TMUX}" && local parsetmux="$(tmux display-message -p 'session: #S, pane: #P' 2> /dev/null)"

    # display tmux stuff
    if [ "${parsetmux}" ]
    then
        local c1="$(tput setaf 172)"
        local c2="$(tput setaf 227)"
        local tmuxline=" ${c1}tmux-(${c2}#$(echo "${parsetmux}" | tr "," "\n" | grep '^ pane:' | awk '{print $2}')${c1}@${c2}$(echo "${parsetmux}" | tr "," "\n" | grep '^session:' | awk '{print $2}')${c1})%{${reset_color}%}"
    else
        local tmuxline=""
    fi

    # GIT stuff
    local git_branch="$(git branch 2> /dev/null || echo NO)"

    # display git stuff at the right side if anything detected
    if [ "${git_branch}" != "NO" ]
    then
        local parse_git_branch="$(echo "${git_branch}" | grep --color=auto "*" | sed -e 's/* \(.*\)/\1/g')"
        local git=" %{$fg[green]%}git %{$fg[cyan]%}⎇  ${parse_git_branch}%{${reset_color}%}"

        # get git status
        local gitstatus="$(git status --porcelain 2> /dev/null)"

        # colorize gitline
        local gitline="${git}"
        # calculate files modified
        local count="$(echo "${gitstatus}" 2> /dev/null | egrep "^\s{0,}M" | wc -l | tr -d " ")"
        [[ "${count}" -gt 0 ]] && gitline="${gitline} %{$fg[red]%}× ${count}"
        # calculate files newly added
        local count="$(echo "${gitstatus}" 2> /dev/null | egrep "^\s{0,}A" | wc -l | tr -d " ")"
        [[ "${count}" -gt 0 ]] && gitline="${gitline} %{$fg[green]%}+ ${count}"
        # calculate files renamed
        local count="$(echo "${gitstatus}" 2> /dev/null | egrep "^\s{0,}R" | wc -l | tr -d " ")"
        [[ "${count}" -gt 0 ]] && gitline="${gitline} %{$fg[yellow]%}~ ${count}"
        # calculate files deleted
        local count="$(echo "${gitstatus}" 2> /dev/null | egrep "^\s{0,}D" | wc -l | tr -d " ")"
        [[ "${count}" -gt 0 ]] && gitline="${gitline} %{$fg[cyan]%}- ${count}"
        # calculate files untracked
        local count="$(echo "${gitstatus}" 2> /dev/null | egrep "^\s{0,}\?\?" | wc -l | tr -d " ")"
        [[ "${count}" -gt 0 ]] && gitline="${gitline} %{$fg[white]%}⁙ ${count}"

        # calculate stash list
        local count="$(git stash list | wc -l)"
        [[ "${count}" -gt 0 ]] && gitline="${gitline} %{$fg[magenta]%}⁂  ${count}${reset_color}"

        # some symbols/characters for git line:  # ⁇ ⁂ ● ⚛ ⁙ ᛭ ⚫ ⚪ ✓ ×    ¤
        # reset colors
        local gitline="${gitline}%{${reset_color}%}"
    else
        local gitline=""
    fi

    # needed for exit status smiley/char
    local exit="%(?..%{ $fg[red]%}☹  %?%{${reset_color}%})"

    # parse pwd structure and build something nice out of it
    local dire="${(%):-%~}"

    # check if user is root
    local root=""
    if [ "$(whoami)" == "root" ]
    then
        local root=" %{$fg[white]%}%{$bg[red]%}root%{${reset_color}%}"
    fi

    # make it possible to define other user and host colour defaults for a certain machine
    # using a .local file
    if [ -f ~/.dotfiles/zsh/zshrc.prompt.local ]
    then
        source ~/.dotfiles/zsh/zshrc.prompt.local
    fi

    # decide which prompt
    case "$(hostname -f)" in
        *'pixelsrv'* )
            local firstline="%{$fg[red]%}%n%{$fg[white]%}@%{$(tput setaf 154)%}%M%{$fg[white]%}:%y" ;;
        * )
            local firstline="%{$fg[${colour_user-blue}]%}%n%{$fg[white]%}@%{$fg[${colour_hostname-red}]%}%M%{$fg[white]%}:%y" ;;
    esac

    # append git/svn/other things
    local firstline="${firstline}${exit}${tmuxline}%{$fg[white]%}${gitline}${svn}${root}"

    # define 2nd line globally for all hosts
    local secondline="%{$fg[yellow]%}${dire} %{$fg[white]%}%% %{${reset_color}%}"

    # finish the prompt
    PS1="${firstline}
${secondline}"

}

# END FOR PROMT STYLING

# include the awesome and colorful zsh highlighting
source ~/.dotfiles/zsh/highlighting/fast-syntax-highlighting.plugin.zsh

# source local config after everything else (testing or so, too)
if [ -f ~/.dotfiles/zsh/zshrc.local.after ]
then
    source ~/.dotfiles/zsh/zshrc.local.after
fi
